<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lab 2 - multiple container services on Modern Application with Serverless Containers</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/</link><description>Recent content in Lab 2 - multiple container services on Modern Application with Serverless Containers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pahud.github.io/cdk-fargate-patterns/lab2/index.xml" rel="self" type="application/rss+xml"/><item><title>Prepare the code</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/prepare-the-code/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/prepare-the-code/readme/</guid><description>Let&amp;rsquo;s delete everything under the services directory and download our application.
# in serverless-container-demo directory # delete everything under services/ rm -rf services/* curl -L -o sample.zip https://github.com/pahud/cdk-fargate-patterns/archive/refs/heads/main.zip unzip sample.zip mv cdk-fargate-patterns-main/services/golang services rm -rf cdk-fargate-patterns-main</description></item><item><title>Local testing</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/local-testing/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/local-testing/readme/</guid><description>Now our code assets are ready at ./services, we should test it locally to before we deploy it onto AWS.
Create a docker-compose.yml under the ./services directory:
version: &amp;#39;3&amp;#39; networks: default: services: golang-order: build: context: ./OrderService dockerfile: Dockerfile container_name: order ports: - 80:8080 environment: - PRODUCT_SVC_URL=http://golang-product:8080 - CUSTOMER_SVC_URL=http://golang-customer:8080 - serviceName=order - versionNum=1.0 networks: - default golang-customer: build: context: ./CommonService dockerfile: Dockerfile container_name: customer ports: - 8080:8080 environment: - PRODUCT_SVC_URL=http://golang-product:8080 - CUSTOMER_SVC_URL=http://golang-customer:8080 - serviceName=customer - versionNum=1.</description></item><item><title>Deploy</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/deploy/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/deploy/readme/</guid><description>Now let&amp;rsquo;s describe our deployment for the three services with AWS CDK.
edit lib/serverless-container-demo-stack.ts.
import * as cdk from &amp;#39;@aws-cdk/core&amp;#39;; import { DualAlbFargateService } from &amp;#39;cdk-fargate-patterns&amp;#39;; import * as ecs from &amp;#39;@aws-cdk/aws-ecs&amp;#39;; import * as path from &amp;#39;path&amp;#39;; export class ServerlessContainerDemoStack extends cdk.Stack { constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); const zoneName = `${this.stackName}.local`; const internalAlbRecordName = &amp;#39;internal&amp;#39;; const internalALBEndpoint = `http://${internalAlbRecordName}.${zoneName}`; // prepare the task for the Order service const orderTask = new ecs.</description></item><item><title>Wrapping up</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/wrapping-up/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/wrapping-up/readme/</guid><description>Congratulations! Now we&amp;rsquo;ve learned how to develop and test multiple microservices locally and deploy all of them to AWS Fargate in a single deployment straight from our IDE.
With this pattern, you are allowed to deploy any of your applications or services from your IDE. You don&amp;rsquo;t have to define your infrastructure, instead, the DualAlbFargateService automatically provisions required infrastructure and resources such as IAM policies, security groups as well as external and internal load balancers and brings up your services with them.</description></item></channel></rss>