<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lab 3 - advanced topics on Modern Application with Serverless Containers</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/</link><description>Recent content in Lab 3 - advanced topics on Modern Application with Serverless Containers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pahud.github.io/cdk-fargate-patterns/lab3/index.xml" rel="self" type="application/rss+xml"/><item><title>Service Autoscaling</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/service-autoscaling/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/service-autoscaling/readme/</guid><description>By default, all services deployed with DualAlbFargateService or DualNlbFargateService have a build-in service autoscaling policy with the target tracking on CPU Utilization and Request Concurrency. The default target CPU utilization for each service is 50 and number of requests per target is 1000. However, you are allowed to define custom policy for each services.
In the following sample, we define a custom service autoscaling policy for the orderTask and allow the service to scale from 2 to 20 with custom requestPerTarget and targetCpuUtilization values.</description></item><item><title>HTTPS with ACM Certificate</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/https-with-acm/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/https-with-acm/readme/</guid><description>To expost HTTPS only listener with existing ACM certificate:
const cert = acm.Certificate.fromCertificateArn(stack, &amp;#39;ExistingCert&amp;#39;, EXISTING_CERT_ARN); new DualAlbFargateService(stack, &amp;#39;ALBService&amp;#39;, { enableExecuteCommand: true, tasks: [ { task: orderTask, desiredCount: 2, // expose the service externally with HTTPS external: { port: 443, certificate: [cert] } }, ], ... }</description></item><item><title>Fargate Spot</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/fargate-spot/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/fargate-spot/readme/</guid><description>AWS Fargate Spot allows you to save your Fargate cost up to 70% off. To enable the Faragate Spot globally for all tasks, use spot: true. This is ideal and recommended for testing and staging environment as it provides exactly the same performace with Fargate with huge cost saving.
new DualAlbFargateService(stack, &amp;#39;ALBService&amp;#39;, { spot: true, ... } However, you are allowed to mix Faragate and Fargate Spot with the capacityProviderStrategy property.</description></item><item><title>Shared ALB Listener</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/shared-alb-listener/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/shared-alb-listener/readme/</guid><description>Services running with shared ALB listener is a common pattern for modern application with multiple services. You are allowed to customize the ALB Listener Rules for name-based routing or path-based routing policies with single ALB listener.
In the sample below, we run the Order, Product and Customer services sharing a single HTTPS listener with different host names.
See Listener rules for your Application Load Balancer for more details.
new DualAlbFargateService(stack, &amp;#39;ALBService&amp;#39;, { spot: true, // FARGATE_SPOT only cluster enableExecuteCommand: true, tasks: [ { task: orderTask, desiredCount: 2, internal: { port: 80 }, external: { port: 443, certificate: [cert], forwardConditions: [elbv2.</description></item></channel></rss>