<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lab 1 - single container service on Modern Application with Serverless Containers</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/</link><description>Recent content in Lab 1 - single container service on Modern Application with Serverless Containers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pahud.github.io/cdk-fargate-patterns/lab1/index.xml" rel="self" type="application/rss+xml"/><item><title>Initialize the Project</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/initialize/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/initialize/readme/</guid><description>Open VSCode with the built-in terminal. Let&amp;rsquo;s create and initialize a new project.
mkdir serverless-container-demo cd $_ Open current directory in the workspace with the code command.
code -a . If you don&amp;rsquo;t have the code command in yoru PATH, you can install it from VSCode command palette.
Initialize the CDK application.
# in the serverless-container-demo directory cdk init -l typescript Install the cdk-fargate-patterns construct library.
npm install cdk-fargate-patterns Install @aws-cdk/aws-ec2 and @aws-cdk/aws-ecs construct libraries.</description></item><item><title>From container image</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/from-image/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/from-image/readme/</guid><description>Let&amp;rsquo;s deploy a service running the Nyan Cat animation. We will use the public container image at
public.ecr.aws/pahudnet/nyancat-docker-image:latest edit lib/serverless-container-demo-stack.ts
import * as cdk from &amp;#39;@aws-cdk/core&amp;#39;; import { DualAlbFargateService } from &amp;#39;cdk-fargate-patterns&amp;#39;; import * as ecs from &amp;#39;@aws-cdk/aws-ecs&amp;#39;; export class ServerlessContainerDemoStack extends cdk.Stack { constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); const mytask = new ecs.FargateTaskDefinition(this, &amp;#39;Task&amp;#39;, { cpu: 256, memoryLimitMiB: 512 }) mytask.addContainer(&amp;#39;nyancat&amp;#39;, { image: ecs.ContainerImage.fromRegistry(&amp;#39;public.ecr.aws/pahudnet/nyancat-docker-image:latest&amp;#39;), portMappings: [ { containerPort: 80, } ] }) new DualAlbFargateService(this, &amp;#39;NyanCatService&amp;#39;, { tasks: [ { task: mytask, external: { port: 80 } } ], route53Ops: { enableLoadBalancerAlias: false, } }) } } Run npx cdk diff to see the changes.</description></item><item><title>From code assets</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/from-code-assets/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/from-code-assets/readme/</guid><description>Now we know how to deploy existing container images from the pulic registries. However, as a developer, we tend build, test and run our development locally and, if everything is working great, deploy it straight from our IDE to the AWS environment.
In this chapter, we will build a simple Golang app locally, make sure it works in our local environment and then just deploy it to AWS Fargate.
In serverless-container-demo directory, create the services/gorilla-mux directory.</description></item><item><title>Wrapping up</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/wrapping-up/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/wrapping-up/readme/</guid><description>Congratulations! Now we&amp;rsquo;ve learned how to deploy services from any public container images or from out local code assets straight from the VSCode IDE. In the next Lab, we will deploy multiple services with the DualAlbFargateService construct and allow all the services to inter-connect internally with service discovery.</description></item></channel></rss>