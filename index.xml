<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>App Modernization with Serverless Containers Workshop on Modern Application with Serverless Containers</title><link>https://pahud.github.io/cdk-fargate-patterns/</link><description>Recent content in App Modernization with Serverless Containers Workshop on Modern Application with Serverless Containers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pahud.github.io/cdk-fargate-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CLI</title><link>https://pahud.github.io/cdk-fargate-patterns/prerequisite/aws-cli/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/prerequisite/aws-cli/readme/</guid><description>To configure your AWS CLI with credentials, run the following command.
aws configure --profile default Configure your credentials and default region.
AWS Access Key ID [None]: &amp;lt;type your access key id&amp;gt; AWS Secret Access Key [None]: &amp;lt;type your secret access key&amp;gt; Default region name [None]: us-east-1 Default output format [None]: Run aws sts get-caller-identity to ensure the configuration.
aws sts get-caller-identity { &amp;#34;UserId&amp;#34;: &amp;#34;{YOUR_USER_ID}&amp;#34;, &amp;#34;Account&amp;#34;: &amp;#34;{YOUR_AWS_ACCOUNT_ID}&amp;#34;, &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::{YOUR_AWS_ACCOUNT_ID}:user/{YOUR_USER_NAME}&amp;#34; } If you forget the credentials, you need to create a new one from the IAM console</description></item><item><title>Initialize the Project</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/initialize/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/initialize/readme/</guid><description>Open VSCode with the built-in terminal. Let&amp;rsquo;s create and initialize a new project.
mkdir serverless-container-demo cd $_ Open current directory in the workspace with the code command.
code -a . If you don&amp;rsquo;t have the code command in yoru PATH, you can install it from VSCode command palette.
Initialize the CDK application.
# in the serverless-container-demo directory cdk init -l typescript Install the cdk-fargate-patterns construct library.
npm install cdk-fargate-patterns Install @aws-cdk/aws-ec2 and @aws-cdk/aws-ecs construct libraries.</description></item><item><title>Prepare the code</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/prepare-the-code/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/prepare-the-code/readme/</guid><description>Let&amp;rsquo;s delete everything under the services directory and download our application.
# in serverless-container-demo directory # delete everything under services/ rm -rf services/* curl -L -o sample.zip https://github.com/pahud/cdk-fargate-patterns/archive/refs/heads/main.zip unzip sample.zip mv cdk-fargate-patterns-main/services/golang services rm -rf cdk-fargate-patterns-main</description></item><item><title>Service Autoscaling</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/service-autoscaling/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/service-autoscaling/readme/</guid><description>By default, all services deployed with DualAlbFargateService or DualNlbFargateService have a build-in service autoscaling policy with the target tracking on CPU Utilization and Request Concurrency. The default target CPU utilization for each service is 50 and number of requests per target is 1000. However, you are allowed to define custom policy for each services.
In the following sample, we define a custom service autoscaling policy for the orderTask and allow the service to scale from 2 to 20 with custom requestPerTarget and targetCpuUtilization values.</description></item><item><title>AWS CDK</title><link>https://pahud.github.io/cdk-fargate-patterns/prerequisite/aws-cdk/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/prerequisite/aws-cdk/readme/</guid><description>The AWS Cloud Development Kit (AWS CDK) is an open source software development framework that allows you to define your cloud application resources using familiar programming languages.
Install the AWS CDK CLI globally in your local environment.
npm install -g aws-cdk Run the following command to verify correct installation and print the version number of the AWS CDK.
npx cdk --version Bootstrap your environment with the AWS CDK Toolkit.
npx cdk bootstrap aws://ACCOUNT-NUMBER/REGION The following examples illustrate bootstrapping an environment in us-east-1.</description></item><item><title>From container image</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/from-image/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/from-image/readme/</guid><description>Let&amp;rsquo;s deploy a service running the Nyan Cat animation. We will use the public container image at
public.ecr.aws/pahudnet/nyancat-docker-image:latest edit lib/serverless-container-demo-stack.ts
import * as cdk from &amp;#39;@aws-cdk/core&amp;#39;; import { DualAlbFargateService } from &amp;#39;cdk-fargate-patterns&amp;#39;; import * as ecs from &amp;#39;@aws-cdk/aws-ecs&amp;#39;; export class ServerlessContainerDemoStack extends cdk.Stack { constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); const mytask = new ecs.FargateTaskDefinition(this, &amp;#39;Task&amp;#39;, { cpu: 256, memoryLimitMiB: 512 }) mytask.addContainer(&amp;#39;nyancat&amp;#39;, { image: ecs.ContainerImage.fromRegistry(&amp;#39;public.ecr.aws/pahudnet/nyancat-docker-image:latest&amp;#39;), portMappings: [ { containerPort: 80, } ] }) new DualAlbFargateService(this, &amp;#39;NyanCatService&amp;#39;, { tasks: [ { task: mytask, external: { port: 80 } } ], route53Ops: { enableLoadBalancerAlias: false, } }) } } Run npx cdk diff to see the changes.</description></item><item><title>HTTPS with ACM Certificate</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/https-with-acm/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/https-with-acm/readme/</guid><description>To expost HTTPS only listener with existing ACM certificate:
const cert = acm.Certificate.fromCertificateArn(stack, &amp;#39;ExistingCert&amp;#39;, EXISTING_CERT_ARN); new DualAlbFargateService(stack, &amp;#39;ALBService&amp;#39;, { enableExecuteCommand: true, tasks: [ { task: orderTask, desiredCount: 2, // expose the service externally with HTTPS external: { port: 443, certificate: [cert] } }, ], ... }</description></item><item><title>Local testing</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/local-testing/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/local-testing/readme/</guid><description>Now our code assets are ready at ./services, we should test it locally to before we deploy it onto AWS.
Create a docker-compose.yml under the ./services directory:
version: &amp;#39;3&amp;#39; networks: default: services: golang-order: build: context: ./OrderService dockerfile: Dockerfile container_name: order ports: - 80:8080 environment: - PRODUCT_SVC_URL=http://golang-product:8080 - CUSTOMER_SVC_URL=http://golang-customer:8080 - serviceName=order - versionNum=1.0 networks: - default golang-customer: build: context: ./CommonService dockerfile: Dockerfile container_name: customer ports: - 8080:8080 environment: - PRODUCT_SVC_URL=http://golang-product:8080 - CUSTOMER_SVC_URL=http://golang-customer:8080 - serviceName=customer - versionNum=1.</description></item><item><title>Deploy</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/deploy/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/deploy/readme/</guid><description>Now let&amp;rsquo;s describe our deployment for the three services with AWS CDK.
edit lib/serverless-container-demo-stack.ts.
import * as cdk from &amp;#39;@aws-cdk/core&amp;#39;; import { DualAlbFargateService } from &amp;#39;cdk-fargate-patterns&amp;#39;; import * as ecs from &amp;#39;@aws-cdk/aws-ecs&amp;#39;; import * as path from &amp;#39;path&amp;#39;; export class ServerlessContainerDemoStack extends cdk.Stack { constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); const zoneName = `${this.stackName}.local`; const internalAlbRecordName = &amp;#39;internal&amp;#39;; const internalALBEndpoint = `http://${internalAlbRecordName}.${zoneName}`; // prepare the task for the Order service const orderTask = new ecs.</description></item><item><title>Fargate Spot</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/fargate-spot/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/fargate-spot/readme/</guid><description>AWS Fargate Spot allows you to save your Fargate cost up to 70% off. To enable the Faragate Spot globally for all tasks, use spot: true. This is ideal and recommended for testing and staging environment as it provides exactly the same performace with Fargate with huge cost saving.
new DualAlbFargateService(stack, &amp;#39;ALBService&amp;#39;, { spot: true, ... } However, you are allowed to mix Faragate and Fargate Spot with the capacityProviderStrategy property.</description></item><item><title>VSCode</title><link>https://pahud.github.io/cdk-fargate-patterns/prerequisite/vscode/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/prerequisite/vscode/readme/</guid><description>You are allowed to use any of your favorite IDEs. However, as VSCode has been very popular for general cloud development, we recommend VSCode as the primary IDE for this workshop.
If you prefer cloud IDEs with VSCode experience, Github Codespaces or Gitpod is recommended as well.</description></item><item><title>Docker Desktop</title><link>https://pahud.github.io/cdk-fargate-patterns/prerequisite/docker/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/prerequisite/docker/readme/</guid><description>You will need to install the Docker Desktop for your local develoment environment. This will allows you to run docker build, docker run and docker compose commands locally for testing.
Run docker versoin to verify the Docker Desktop has successfully installed.
docker version</description></item><item><title>From code assets</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/from-code-assets/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/from-code-assets/readme/</guid><description>Now we know how to deploy existing container images from the pulic registries. However, as a developer, we tend build, test and run our development locally and, if everything is working great, deploy it straight from our IDE to the AWS environment.
In this chapter, we will build a simple Golang app locally, make sure it works in our local environment and then just deploy it to AWS Fargate.
In serverless-container-demo directory, create the services/gorilla-mux directory.</description></item><item><title>Shared ALB Listener</title><link>https://pahud.github.io/cdk-fargate-patterns/lab3/shared-alb-listener/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab3/shared-alb-listener/readme/</guid><description>Services running with shared ALB listener is a common pattern for modern application with multiple services. You are allowed to customize the ALB Listener Rules for name-based routing or path-based routing policies with single ALB listener.
In the sample below, we run the Order, Product and Customer services sharing a single HTTPS listener with different host names.
See Listener rules for your Application Load Balancer for more details.
new DualAlbFargateService(stack, &amp;#39;ALBService&amp;#39;, { spot: true, // FARGATE_SPOT only cluster enableExecuteCommand: true, tasks: [ { task: orderTask, desiredCount: 2, internal: { port: 80 }, external: { port: 443, certificate: [cert], forwardConditions: [elbv2.</description></item><item><title>Wrapping up</title><link>https://pahud.github.io/cdk-fargate-patterns/lab1/wrapping-up/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab1/wrapping-up/readme/</guid><description>Congratulations! Now we&amp;rsquo;ve learned how to deploy services from any public container images or from out local code assets straight from the VSCode IDE. In the next Lab, we will deploy multiple services with the DualAlbFargateService construct and allow all the services to inter-connect internally with service discovery.</description></item><item><title>Wrapping up</title><link>https://pahud.github.io/cdk-fargate-patterns/lab2/wrapping-up/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/lab2/wrapping-up/readme/</guid><description>Congratulations! Now we&amp;rsquo;ve learned how to develop and test multiple microservices locally and deploy all of them to AWS Fargate in a single deployment straight from our IDE.
With this pattern, you are allowed to deploy any of your applications or services from your IDE. You don&amp;rsquo;t have to define your infrastructure, instead, the DualAlbFargateService automatically provisions required infrastructure and resources such as IAM policies, security groups as well as external and internal load balancers and brings up your services with them.</description></item><item><title/><link>https://pahud.github.io/cdk-fargate-patterns/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pahud.github.io/cdk-fargate-patterns/readme/</guid><description/></item></channel></rss>